import type UAuth from '@uauth/js';
import type { UAuthConstructorOptions } from '@uauth/js';
import { AbstractConnector } from '@web3-react/abstract-connector';
import { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types';
export interface UAuthConnectors {
    injected: AbstractConnector;
    walletconnect: AbstractConnector;
}
export interface UAuthConnectorOptions extends AbstractConnectorArguments, Partial<UAuthConstructorOptions> {
    uauth?: UAuth;
    connectors: UAuthConnectors;
    shouldLoginWithRedirect?: boolean;
}
export interface ConnectorLoginCallbackOptions {
    url?: string;
    activate: (connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean) => Promise<void>;
    onError?: (error: Error) => void;
    throwErrors?: boolean;
}
declare class UAuthConnector extends AbstractConnector {
    options: UAuthConnectorOptions;
    static UAuth: typeof UAuth;
    static registerUAuth(pkg: typeof UAuth): void;
    static importUAuth(): Promise<void>;
    private _subConnector?;
    private _uauth?;
    constructor(options: UAuthConnectorOptions);
    callbackAndActivate<T>(options: ConnectorLoginCallbackOptions): Promise<void>;
    activate(): Promise<ConnectorUpdate>;
    deactivate(): void;
    isAuthorized(): Promise<boolean>;
    getProvider(): Promise<any>;
    getChainId(): Promise<number | string>;
    getAccount(): Promise<null | string>;
    get uauth(): UAuth;
    get subConnector(): AbstractConnector & {
        isAuthorized?(): Promise<boolean>;
    };
    private handleUpdate;
    private handleDeactivate;
    private handleError;
}
export default UAuthConnector;
